1.	Create an account at https://github.com  (my account is ldaryl)

2.	Create a repository called "git-tests" at https://github.com/ldaryl

-------------------------------------------------------------------
1.	Download Git Client: https://git-scm.com/download/win (I use Portable version)

2.	Install Git Client (Portable version)

3.	Startup the Git Client
		<Git_Client_Installed_directory>\bin\git-bash.exe

4.	Setup the proxy server for Git Client to access internet
		$ git config --global http.proxy http://176.175.25.48:8080
		$ git config -l 	(just takeing a look at the config settings)


5.	Create a working directory
		$ pwd
		/

		$ mkdir ldaryl		(this is my working directory)
		$ cd ldaryl
		$ git clone https://github.com/ldaryl/git-test git-test (let's clone from a github repository (https://github.com/ldaryl/git-test) into '/ldaryl/git-test' directory)
		$ cd git-test			(cd in the newly created directory)
		$ git branch 			(just checking)
		$ git remote -v 	(just checking)
		$ echo "Hello World" > helloworld.txt (just creating a test file)
		$ git add . ('stage' all file in current directory. 'stage' means to prepare for 'commit')
		$ git commit -m "My first commit"		('commit' any 'staged' file)
		$ git push origin 									('push' remote, ie https://github.com/ldaryl/git-test)

6.	Done - You will see the 'helloworld.txt' in 'https://github.com/ldaryl/git-test'
--------------------------------------------------------------------------------------
https://www.youtube.com/watch?v=0fKg7e37bQE

Create a remote repository in github.com
- initialise with a readme (check box . check it)
- look for the clone url (need this url for local repository)

In local PC
- Need to install Git
- Note: Working directory contains (1) modified files, (2) untracked files
- Note: Staging Area contains files ready to commit to local_repo
- In CMD, cd into a preferred directory
	- <some_dir> git clone <remote_repository's_clone_url>
	- this will copy the remote_repository to the local <some_dir>
	
	- <some_dir> git status
	- Shows status of local_repo
	
	- <some_dir> git add <filename>
	- Adding a file to local_repo's staging area
	
	- <some_dir> git add -A
	- Adding all files in <some_dir> into to local_repo's staging area

	- <some_dir> git reset <filename>
	- Telling git to untrack <filename> and move it to working directory

	- <some_dir> git reset
	- Telling git to untrack all files and move them to working directory

	- <some_dir> git status
	- Shows status of local_repo
	
	- <some_dir> git log
	- Shows commit info

	- <some_dir> git commit -m "<some comments>"
	- committed all added files local_repos
	
	- <some_dir> git push
	- all locally committed files will be sync'ed to remote_repos
	
	- <some_dir> git pull
	- will push all files from remote_repos to local_repos
	- make sure you are in the local_repos directory


$ git --version
- Check version

$ git config --list
- See the config list

$ git config --global user.name "ldaryl"
$ git config --global user.email "ldaryl.junks@gmail.com"
- set name and email for check-in purpose

How to setup a local repo to track a local project?
- cd into the project directory
- run "git init" in the project directory

How to remove git tracking on a project directory?
- cd into the project directory
- delete the .git file in the project directory

How to tell git to ignore tracking certain files?
- cd into the project directory
- create a .gitignore file (a simple text file)
- wildcard may be used

How to clone a remote_repo to the local_repo?
$ git clone <remote_repo_url> <clone_to_local_location>
eg. $ git clone ../remote_repo.git ./test

How to list information of the remote_repo which you have cloned from?
- cd into the directory containing the clone
- $ git remote -v

How to list the Branch information of lcoal_repo & remote_repo?
- cd into the directory containing the clone
- $ git branch -a

How to push changed code to the remote_repo?
$ git diff
- Shows the changes done to files

$ git status
- Shows the names of the modified files

$ git add -A
- "add -A" all changed files into the Staging Area

$ git status
- Shows the names of files ready to be committed

$ git commit -m "some comments"
- Commits all files in the Staging Area into the local_repo

How to push committed files in the local_repo to the remote_repo?
- First do a pull from remote_repo to ensure all other changes since 
- last pull to our local_repo.
$ git pull origin master

- Second, we push our changes from local_repo to remote_repo
$ git push origin master

-----------------------------------------------------------------------
How to create a branch from local_repo's master?
$ git branch <branch_name>

$ git branch
- Lists all branches in the local_repo
- '+' sign besides the branch name shows that you are current working on the branch

How to switch to working-on-specific-branch?
$ git checkout <branch_name>

After creating a branch and switching to work on it, you can
- change the files

- Add the files to Staging Area: 
	$ git add -A 
	$ git add <filename>

- Commit the changed file to local_repo
	$ git commit -m "some comment"

- Push the branch to remote_repo
	$ git push -u origin <branch_name>
	(Note: -u associate the branch_name in local_repo & remote_repo
	 so that in future we just need to
	 			$ git pull
	 			$ git push
	}

How to merge a successfully tested Branch to the Master?
- First, switch to work on Master
	$ git checkout master

- Second, pull all other changes in the remote_repo to the local_repos master
	$ git pull origin master

- Third, show only master
	$ git branch --merged

- Fourth, merge <branch_name> to master
	$ git merge <branch_master>

- Fifth, push the local_repo master to remote_repo
	$ git push origin master
	
- Sixth, show master and <branch_name>
	$ git branch --merged

- Seventh, delete <branch_name> from local_repo
	$ git branch -d <branch_name>
	$ git branch -a (just show some branch info)

- Eight, remove branch_name from remote_repo
	$ git push origin --delete <branch_name>
	$ git branch -a (just show some branch info)
-----------------------------------------------------------------------
Installing EGit in Eclipse

EGit Configuration
- Preferences-window Window => Preferences => Git => Configuration ==> New Entryâ€¦ Button. 
	- Key: user.name
	- Value: your_name
	Repeat this procedure with 
	- Key: user.email
	- Value: your_email_address
	and click OK (user.name and user.email should be the same you use for your GitHub account)

Creating Local Repositories
- First, you have to create a project in Eclipse
- Second, right click on the project => Team => Share Project ==> Git ==> Next

